// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info_user": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "mrga.com",
            "email": "mrga@mail.com"
        },
        "license": {
            "name": "AS IS (NO WARRANTY)"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/meetme/city": {
            "get": {
                "description": "returned list of cities",
                "tags": [
                    "info_user"
                ],
                "summary": "get list of cities for registration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/meetme/login": {
            "post": {
                "description": "authorise existing user with username/email and password",
                "tags": [
                    "Registration"
                ],
                "summary": "authorise user",
                "parameters": [
                    {
                        "description": "nickname/email password",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/meetme/logout": {
            "post": {
                "description": "user can log out and end session",
                "tags": [
                    "Registration"
                ],
                "summary": "Logout authorised user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/meetme/recommendations": {
            "get": {
                "description": "now just return info_user 10 or fewer users",
                "tags": [
                    "Recommendations"
                ],
                "summary": "return recommendations for user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/meetme/register": {
            "post": {
                "description": "create new account with unique username and email",
                "tags": [
                    "Registration"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "info_user about user",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dataStruct.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/meetme/user": {
            "get": {
                "description": "you can get info_user about current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info_user"
                ],
                "summary": "get info_user about current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/app.UserRes"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "app.LoginInput": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "app.UserRes": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "avatar": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "sex": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dataStruct.User": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "avatar": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "sex": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "5.159.100.59",
	BasePath:         "/meetme/",
	Schemes:          []string{"http"},
	Title:            "MRGA",
	Description:      "Meetme backend documentation",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
