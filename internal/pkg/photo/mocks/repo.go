// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dataStruct "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/app/data_struct"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryPhoto is a mock of IRepositoryPhoto interface.
type MockIRepositoryPhoto struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryPhotoMockRecorder
}

// MockIRepositoryPhotoMockRecorder is the mock recorder for MockIRepositoryPhoto.
type MockIRepositoryPhotoMockRecorder struct {
	mock *MockIRepositoryPhoto
}

// NewMockIRepositoryPhoto creates a new mock instance.
func NewMockIRepositoryPhoto(ctrl *gomock.Controller) *MockIRepositoryPhoto {
	mock := &MockIRepositoryPhoto{ctrl: ctrl}
	mock.recorder = &MockIRepositoryPhotoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryPhoto) EXPECT() *MockIRepositoryPhotoMockRecorder {
	return m.recorder
}

// ChangePhoto mocks base method.
func (m *MockIRepositoryPhoto) ChangePhoto(photoId, userId, newPhotoId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePhoto", photoId, userId, newPhotoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePhoto indicates an expected call of ChangePhoto.
func (mr *MockIRepositoryPhotoMockRecorder) ChangePhoto(photoId, userId, newPhotoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePhoto", reflect.TypeOf((*MockIRepositoryPhoto)(nil).ChangePhoto), photoId, userId, newPhotoId)
}

// DeletePhoto mocks base method.
func (m *MockIRepositoryPhoto) DeletePhoto(row dataStruct.UserPhoto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhoto", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhoto indicates an expected call of DeletePhoto.
func (mr *MockIRepositoryPhotoMockRecorder) DeletePhoto(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhoto", reflect.TypeOf((*MockIRepositoryPhoto)(nil).DeletePhoto), row)
}

// GetAvatar mocks base method.
func (m *MockIRepositoryPhoto) GetAvatar(userId uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", userId)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockIRepositoryPhotoMockRecorder) GetAvatar(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockIRepositoryPhoto)(nil).GetAvatar), userId)
}

// GetPhotos mocks base method.
func (m *MockIRepositoryPhoto) GetPhotos(userId uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotos", userId)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotos indicates an expected call of GetPhotos.
func (mr *MockIRepositoryPhotoMockRecorder) GetPhotos(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotos", reflect.TypeOf((*MockIRepositoryPhoto)(nil).GetPhotos), userId)
}

// SavePhoto mocks base method.
func (m *MockIRepositoryPhoto) SavePhoto(row dataStruct.UserPhoto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePhoto", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePhoto indicates an expected call of SavePhoto.
func (mr *MockIRepositoryPhotoMockRecorder) SavePhoto(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePhoto", reflect.TypeOf((*MockIRepositoryPhoto)(nil).SavePhoto), row)
}
