// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// ChangePhoto mocks base method.
func (m *MockUseCase) ChangePhoto(num int, photoId, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePhoto", num, photoId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePhoto indicates an expected call of ChangePhoto.
func (mr *MockUseCaseMockRecorder) ChangePhoto(num, photoId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePhoto", reflect.TypeOf((*MockUseCase)(nil).ChangePhoto), num, photoId, userId)
}

// DeletePhoto mocks base method.
func (m *MockUseCase) DeletePhoto(userId uint, photoId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhoto", userId, photoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhoto indicates an expected call of DeletePhoto.
func (mr *MockUseCaseMockRecorder) DeletePhoto(userId, photoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhoto", reflect.TypeOf((*MockUseCase)(nil).DeletePhoto), userId, photoId)
}

// GetAllPhotos mocks base method.
func (m *MockUseCase) GetAllPhotos(userId uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPhotos", userId)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPhotos indicates an expected call of GetAllPhotos.
func (mr *MockUseCaseMockRecorder) GetAllPhotos(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPhotos", reflect.TypeOf((*MockUseCase)(nil).GetAllPhotos), userId)
}

// GetAvatar mocks base method.
func (m *MockUseCase) GetAvatar(userId uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", userId)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockUseCaseMockRecorder) GetAvatar(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockUseCase)(nil).GetAvatar), userId)
}

// SavePhoto mocks base method.
func (m *MockUseCase) SavePhoto(userId, photoId uint, avatar bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePhoto", userId, photoId, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePhoto indicates an expected call of SavePhoto.
func (mr *MockUseCaseMockRecorder) SavePhoto(userId, photoId, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePhoto", reflect.TypeOf((*MockUseCase)(nil).SavePhoto), userId, photoId, avatar)
}
