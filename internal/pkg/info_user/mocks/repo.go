// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dataStruct "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/app/data_struct"
	info_user "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/pkg/info_user"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryInfo is a mock of IRepositoryInfo interface.
type MockIRepositoryInfo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryInfoMockRecorder
}

// MockIRepositoryInfoMockRecorder is the mock recorder for MockIRepositoryInfo.
type MockIRepositoryInfoMockRecorder struct {
	mock *MockIRepositoryInfo
}

// NewMockIRepositoryInfo creates a new mock instance.
func NewMockIRepositoryInfo(ctrl *gomock.Controller) *MockIRepositoryInfo {
	mock := &MockIRepositoryInfo{ctrl: ctrl}
	mock.recorder = &MockIRepositoryInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryInfo) EXPECT() *MockIRepositoryInfoMockRecorder {
	return m.recorder
}

// AddInfoUser mocks base method.
func (m *MockIRepositoryInfo) AddInfoUser(userInfo *dataStruct.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInfoUser", userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInfoUser indicates an expected call of AddInfoUser.
func (mr *MockIRepositoryInfoMockRecorder) AddInfoUser(userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInfoUser", reflect.TypeOf((*MockIRepositoryInfo)(nil).AddInfoUser), userInfo)
}

// AddUserHashtag mocks base method.
func (m *MockIRepositoryInfo) AddUserHashtag(hashtag []dataStruct.UserHashtag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserHashtag", hashtag)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserHashtag indicates an expected call of AddUserHashtag.
func (mr *MockIRepositoryInfoMockRecorder) AddUserHashtag(hashtag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserHashtag", reflect.TypeOf((*MockIRepositoryInfo)(nil).AddUserHashtag), hashtag)
}

// ChangeInfo mocks base method.
func (m *MockIRepositoryInfo) ChangeInfo(userInfo *dataStruct.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeInfo", userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeInfo indicates an expected call of ChangeInfo.
func (mr *MockIRepositoryInfoMockRecorder) ChangeInfo(userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeInfo", reflect.TypeOf((*MockIRepositoryInfo)(nil).ChangeInfo), userInfo)
}

// ChangeUserStatus mocks base method.
func (m *MockIRepositoryInfo) ChangeUserStatus(userId, statusId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserStatus", userId, statusId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserStatus indicates an expected call of ChangeUserStatus.
func (mr *MockIRepositoryInfoMockRecorder) ChangeUserStatus(userId, statusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserStatus", reflect.TypeOf((*MockIRepositoryInfo)(nil).ChangeUserStatus), userId, statusId)
}

// CheckFilter mocks base method.
func (m *MockIRepositoryInfo) CheckFilter(userId uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFilter", userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFilter indicates an expected call of CheckFilter.
func (mr *MockIRepositoryInfoMockRecorder) CheckFilter(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFilter", reflect.TypeOf((*MockIRepositoryInfo)(nil).CheckFilter), userId)
}

// DeleteUserHashtag mocks base method.
func (m *MockIRepositoryInfo) DeleteUserHashtag(userId uint, hashtagId []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserHashtag", userId, hashtagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserHashtag indicates an expected call of DeleteUserHashtag.
func (mr *MockIRepositoryInfoMockRecorder) DeleteUserHashtag(userId, hashtagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserHashtag", reflect.TypeOf((*MockIRepositoryInfo)(nil).DeleteUserHashtag), userId, hashtagId)
}

// GetAge mocks base method.
func (m *MockIRepositoryInfo) GetAge(userId uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAge", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAge indicates an expected call of GetAge.
func (mr *MockIRepositoryInfoMockRecorder) GetAge(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAge", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetAge), userId)
}

// GetUserById mocks base method.
func (m *MockIRepositoryInfo) GetUserById(arg0 uint) (info_user.UserRestTemp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0)
	ret0, _ := ret[0].(info_user.UserRestTemp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIRepositoryInfoMockRecorder) GetUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetUserById), arg0)
}

// GetUserHashtags mocks base method.
func (m *MockIRepositoryInfo) GetUserHashtags(userId uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHashtags", userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHashtags indicates an expected call of GetUserHashtags.
func (mr *MockIRepositoryInfoMockRecorder) GetUserHashtags(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHashtags", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetUserHashtags), userId)
}

// GetUserHashtagsId mocks base method.
func (m *MockIRepositoryInfo) GetUserHashtagsId(userId uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHashtagsId", userId)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHashtagsId indicates an expected call of GetUserHashtagsId.
func (mr *MockIRepositoryInfoMockRecorder) GetUserHashtagsId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHashtagsId", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetUserHashtagsId), userId)
}

// GetUserInfo mocks base method.
func (m *MockIRepositoryInfo) GetUserInfo(userId uint) (info_user.InfoStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", userId)
	ret0, _ := ret[0].(info_user.InfoStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockIRepositoryInfoMockRecorder) GetUserInfo(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetUserInfo), userId)
}

// GetUserStatus mocks base method.
func (m *MockIRepositoryInfo) GetUserStatus(userId uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatus", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStatus indicates an expected call of GetUserStatus.
func (mr *MockIRepositoryInfoMockRecorder) GetUserStatus(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatus", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetUserStatus), userId)
}
