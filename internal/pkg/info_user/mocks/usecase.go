// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	info_user "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/pkg/info_user"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddHashtags mocks base method.
func (m *MockUseCase) AddHashtags(userId uint, inp info_user.HashtagInp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHashtags", userId, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHashtags indicates an expected call of AddHashtags.
func (mr *MockUseCaseMockRecorder) AddHashtags(userId, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHashtags", reflect.TypeOf((*MockUseCase)(nil).AddHashtags), userId, inp)
}

// AddInfo mocks base method.
func (m *MockUseCase) AddInfo(userId uint, info info_user.InfoStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInfo", userId, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInfo indicates an expected call of AddInfo.
func (mr *MockUseCaseMockRecorder) AddInfo(userId, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInfo", reflect.TypeOf((*MockUseCase)(nil).AddInfo), userId, info)
}

// ChangeInfo mocks base method.
func (m *MockUseCase) ChangeInfo(userId uint, info info_user.InfoChange) (info_user.InfoStructAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeInfo", userId, info)
	ret0, _ := ret[0].(info_user.InfoStructAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeInfo indicates an expected call of ChangeInfo.
func (mr *MockUseCaseMockRecorder) ChangeInfo(userId, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeInfo", reflect.TypeOf((*MockUseCase)(nil).ChangeInfo), userId, info)
}

// ChangeUserHashtags mocks base method.
func (m *MockUseCase) ChangeUserHashtags(userId uint, inp info_user.HashtagInp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserHashtags", userId, inp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserHashtags indicates an expected call of ChangeUserHashtags.
func (mr *MockUseCaseMockRecorder) ChangeUserHashtags(userId, inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserHashtags", reflect.TypeOf((*MockUseCase)(nil).ChangeUserHashtags), userId, inp)
}

// ChangeUserStatus mocks base method.
func (m *MockUseCase) ChangeUserStatus(userId uint, statusInp info_user.StatusInp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserStatus", userId, statusInp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserStatus indicates an expected call of ChangeUserStatus.
func (mr *MockUseCaseMockRecorder) ChangeUserStatus(userId, statusInp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserStatus", reflect.TypeOf((*MockUseCase)(nil).ChangeUserStatus), userId, statusInp)
}

// GetInfo mocks base method.
func (m *MockUseCase) GetInfo(userId uint) (info_user.InfoStructAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", userId)
	ret0, _ := ret[0].(info_user.InfoStructAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockUseCaseMockRecorder) GetInfo(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUseCase)(nil).GetInfo), userId)
}

// GetUserById mocks base method.
func (m *MockUseCase) GetUserById(arg0 uint) (info_user.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0)
	ret0, _ := ret[0].(info_user.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUseCaseMockRecorder) GetUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUseCase)(nil).GetUserById), arg0)
}

// GetUserHashtags mocks base method.
func (m *MockUseCase) GetUserHashtags(userId uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHashtags", userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHashtags indicates an expected call of GetUserHashtags.
func (mr *MockUseCaseMockRecorder) GetUserHashtags(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHashtags", reflect.TypeOf((*MockUseCase)(nil).GetUserHashtags), userId)
}

// GetUserHashtagsId mocks base method.
func (m *MockUseCase) GetUserHashtagsId(userId uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHashtagsId", userId)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHashtagsId indicates an expected call of GetUserHashtagsId.
func (mr *MockUseCaseMockRecorder) GetUserHashtagsId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHashtagsId", reflect.TypeOf((*MockUseCase)(nil).GetUserHashtagsId), userId)
}

// GetUserStatus mocks base method.
func (m *MockUseCase) GetUserStatus(userId uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatus", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStatus indicates an expected call of GetUserStatus.
func (mr *MockUseCaseMockRecorder) GetUserStatus(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatus", reflect.TypeOf((*MockUseCase)(nil).GetUserStatus), userId)
}
