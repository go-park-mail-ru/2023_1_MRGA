// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dataStruct "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/app/data_struct"
	match "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/pkg/match"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryMatch is a mock of IRepositoryMatch interface.
type MockIRepositoryMatch struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMatchMockRecorder
}

// MockIRepositoryMatchMockRecorder is the mock recorder for MockIRepositoryMatch.
type MockIRepositoryMatchMockRecorder struct {
	mock *MockIRepositoryMatch
}

// NewMockIRepositoryMatch creates a new mock instance.
func NewMockIRepositoryMatch(ctrl *gomock.Controller) *MockIRepositoryMatch {
	mock := &MockIRepositoryMatch{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryMatch) EXPECT() *MockIRepositoryMatchMockRecorder {
	return m.recorder
}

// AddHistoryRow mocks base method.
func (m *MockIRepositoryMatch) AddHistoryRow(row dataStruct.UserHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHistoryRow", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHistoryRow indicates an expected call of AddHistoryRow.
func (mr *MockIRepositoryMatchMockRecorder) AddHistoryRow(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHistoryRow", reflect.TypeOf((*MockIRepositoryMatch)(nil).AddHistoryRow), row)
}

// AddMatchRow mocks base method.
func (m *MockIRepositoryMatch) AddMatchRow(row dataStruct.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMatchRow", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMatchRow indicates an expected call of AddMatchRow.
func (mr *MockIRepositoryMatchMockRecorder) AddMatchRow(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMatchRow", reflect.TypeOf((*MockIRepositoryMatch)(nil).AddMatchRow), row)
}

// AddUserReaction mocks base method.
func (m *MockIRepositoryMatch) AddUserReaction(row dataStruct.UserReaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserReaction", row)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserReaction indicates an expected call of AddUserReaction.
func (mr *MockIRepositoryMatchMockRecorder) AddUserReaction(row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserReaction", reflect.TypeOf((*MockIRepositoryMatch)(nil).AddUserReaction), row)
}

// ChangeStatusMatch mocks base method.
func (m *MockIRepositoryMatch) ChangeStatusMatch(userId, profileId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatusMatch", userId, profileId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatusMatch indicates an expected call of ChangeStatusMatch.
func (mr *MockIRepositoryMatchMockRecorder) ChangeStatusMatch(userId, profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatusMatch", reflect.TypeOf((*MockIRepositoryMatch)(nil).ChangeStatusMatch), userId, profileId)
}

// CheckCountReaction mocks base method.
func (m *MockIRepositoryMatch) CheckCountReaction(userId uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCountReaction", userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCountReaction indicates an expected call of CheckCountReaction.
func (mr *MockIRepositoryMatchMockRecorder) CheckCountReaction(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCountReaction", reflect.TypeOf((*MockIRepositoryMatch)(nil).CheckCountReaction), userId)
}

// DeleteMatch mocks base method.
func (m *MockIRepositoryMatch) DeleteMatch(userId, userMatchId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatch", userId, userMatchId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatch indicates an expected call of DeleteMatch.
func (mr *MockIRepositoryMatchMockRecorder) DeleteMatch(userId, userMatchId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatch", reflect.TypeOf((*MockIRepositoryMatch)(nil).DeleteMatch), userId, userMatchId)
}

// DeleteUserReaction mocks base method.
func (m *MockIRepositoryMatch) DeleteUserReaction(rowId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserReaction", rowId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserReaction indicates an expected call of DeleteUserReaction.
func (mr *MockIRepositoryMatchMockRecorder) DeleteUserReaction(rowId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserReaction", reflect.TypeOf((*MockIRepositoryMatch)(nil).DeleteUserReaction), rowId)
}

// GetAge mocks base method.
func (m *MockIRepositoryMatch) GetAge(userId uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAge", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAge indicates an expected call of GetAge.
func (mr *MockIRepositoryMatchMockRecorder) GetAge(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAge", reflect.TypeOf((*MockIRepositoryMatch)(nil).GetAge), userId)
}

// GetIdReaction mocks base method.
func (m *MockIRepositoryMatch) GetIdReaction(reaction string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdReaction", reaction)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdReaction indicates an expected call of GetIdReaction.
func (mr *MockIRepositoryMatchMockRecorder) GetIdReaction(reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdReaction", reflect.TypeOf((*MockIRepositoryMatch)(nil).GetIdReaction), reaction)
}

// GetMatches mocks base method.
func (m *MockIRepositoryMatch) GetMatches(userId uint) ([]dataStruct.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatches", userId)
	ret0, _ := ret[0].([]dataStruct.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatches indicates an expected call of GetMatches.
func (mr *MockIRepositoryMatchMockRecorder) GetMatches(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatches", reflect.TypeOf((*MockIRepositoryMatch)(nil).GetMatches), userId)
}

// GetUser mocks base method.
func (m *MockIRepositoryMatch) GetUser(userId uint) (match.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(match.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIRepositoryMatchMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIRepositoryMatch)(nil).GetUser), userId)
}

// GetUserReaction mocks base method.
func (m *MockIRepositoryMatch) GetUserReaction(userId, userToId uint) (dataStruct.UserReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReaction", userId, userToId)
	ret0, _ := ret[0].(dataStruct.UserReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReaction indicates an expected call of GetUserReaction.
func (mr *MockIRepositoryMatchMockRecorder) GetUserReaction(userId, userToId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReaction", reflect.TypeOf((*MockIRepositoryMatch)(nil).GetUserReaction), userId, userToId)
}

// IncrementLikeCount mocks base method.
func (m *MockIRepositoryMatch) IncrementLikeCount(userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementLikeCount", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementLikeCount indicates an expected call of IncrementLikeCount.
func (mr *MockIRepositoryMatchMockRecorder) IncrementLikeCount(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementLikeCount", reflect.TypeOf((*MockIRepositoryMatch)(nil).IncrementLikeCount), userId)
}
