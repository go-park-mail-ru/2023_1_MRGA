// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	match "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/pkg/match"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// DeleteMatch mocks base method.
func (m *MockUseCase) DeleteMatch(userId, userMatchId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMatch", userId, userMatchId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMatch indicates an expected call of DeleteMatch.
func (mr *MockUseCaseMockRecorder) DeleteMatch(userId, userMatchId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMatch", reflect.TypeOf((*MockUseCase)(nil).DeleteMatch), userId, userMatchId)
}

// GetMatches mocks base method.
func (m *MockUseCase) GetMatches(userId uint) ([]match.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatches", userId)
	ret0, _ := ret[0].([]match.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatches indicates an expected call of GetMatches.
func (mr *MockUseCaseMockRecorder) GetMatches(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatches", reflect.TypeOf((*MockUseCase)(nil).GetMatches), userId)
}

// PostReaction mocks base method.
func (m *MockUseCase) PostReaction(userId uint, reaction match.ReactionInp) (match.ReactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostReaction", userId, reaction)
	ret0, _ := ret[0].(match.ReactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostReaction indicates an expected call of PostReaction.
func (mr *MockUseCaseMockRecorder) PostReaction(userId, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostReaction", reflect.TypeOf((*MockUseCase)(nil).PostReaction), userId, reaction)
}
