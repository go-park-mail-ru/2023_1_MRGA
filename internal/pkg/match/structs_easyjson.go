// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package match

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch(in *jlexer.Lexer, out *UserRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserId = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "avatar":
			out.Photo = uint(in.Uint())
		case "shown":
			out.Shown = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch(out *jwriter.Writer, in UserRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.Uint(uint(in.Photo))
	}
	{
		const prefix string = ",\"shown\":"
		out.RawString(prefix)
		out.Bool(bool(in.Shown))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch(l, v)
}
func easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch1(in *jlexer.Lexer, out *ReactionResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ResultCode":
			out.ResultCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch1(out *jwriter.Writer, in ReactionResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ResultCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ResultCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReactionResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReactionResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReactionResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReactionResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch1(l, v)
}
func easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch2(in *jlexer.Lexer, out *ReactionInp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "evaluatedUserId":
			out.EvaluatedUserId = uint(in.Uint())
		case "reaction":
			out.Reaction = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch2(out *jwriter.Writer, in ReactionInp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"evaluatedUserId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.EvaluatedUserId))
	}
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		out.String(string(in.Reaction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReactionInp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReactionInp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReactionInp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReactionInp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch2(l, v)
}
func easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch3(in *jlexer.Lexer, out *ChatAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserId = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Photo = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch3(out *jwriter.Writer, in ChatAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.Uint(uint(in.Photo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComGoParkMailRu20231MRGAGitInternalPkgMatch3(l, v)
}
