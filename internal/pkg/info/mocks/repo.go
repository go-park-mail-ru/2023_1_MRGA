// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryInfo is a mock of IRepositoryInfo interface.
type MockIRepositoryInfo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryInfoMockRecorder
}

// MockIRepositoryInfoMockRecorder is the mock recorder for MockIRepositoryInfo.
type MockIRepositoryInfoMockRecorder struct {
	mock *MockIRepositoryInfo
}

// NewMockIRepositoryInfo creates a new mock instance.
func NewMockIRepositoryInfo(ctrl *gomock.Controller) *MockIRepositoryInfo {
	mock := &MockIRepositoryInfo{ctrl: ctrl}
	mock.recorder = &MockIRepositoryInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryInfo) EXPECT() *MockIRepositoryInfoMockRecorder {
	return m.recorder
}

// GetCities mocks base method.
func (m *MockIRepositoryInfo) GetCities() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCities")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCities indicates an expected call of GetCities.
func (mr *MockIRepositoryInfoMockRecorder) GetCities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCities", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetCities))
}

// GetCityId mocks base method.
func (m *MockIRepositoryInfo) GetCityId(nameCity string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityId", nameCity)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityId indicates an expected call of GetCityId.
func (mr *MockIRepositoryInfoMockRecorder) GetCityId(nameCity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityId", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetCityId), nameCity)
}

// GetEducation mocks base method.
func (m *MockIRepositoryInfo) GetEducation() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEducation")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEducation indicates an expected call of GetEducation.
func (mr *MockIRepositoryInfoMockRecorder) GetEducation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEducation", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetEducation))
}

// GetEducationId mocks base method.
func (m *MockIRepositoryInfo) GetEducationId(nameEducation string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEducationId", nameEducation)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEducationId indicates an expected call of GetEducationId.
func (mr *MockIRepositoryInfoMockRecorder) GetEducationId(nameEducation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEducationId", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetEducationId), nameEducation)
}

// GetHashtagId mocks base method.
func (m *MockIRepositoryInfo) GetHashtagId(nameHashtag []string) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashtagId", nameHashtag)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashtagId indicates an expected call of GetHashtagId.
func (mr *MockIRepositoryInfoMockRecorder) GetHashtagId(nameHashtag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashtagId", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetHashtagId), nameHashtag)
}

// GetHashtags mocks base method.
func (m *MockIRepositoryInfo) GetHashtags() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashtags")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashtags indicates an expected call of GetHashtags.
func (mr *MockIRepositoryInfoMockRecorder) GetHashtags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashtags", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetHashtags))
}

// GetJobId mocks base method.
func (m *MockIRepositoryInfo) GetJobId(nameJob string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobId", nameJob)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobId indicates an expected call of GetJobId.
func (mr *MockIRepositoryInfoMockRecorder) GetJobId(nameJob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobId", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetJobId), nameJob)
}

// GetJobs mocks base method.
func (m *MockIRepositoryInfo) GetJobs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs.
func (mr *MockIRepositoryInfoMockRecorder) GetJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetJobs))
}

// GetReasons mocks base method.
func (m *MockIRepositoryInfo) GetReasons() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReasons")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReasons indicates an expected call of GetReasons.
func (mr *MockIRepositoryInfoMockRecorder) GetReasons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReasons", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetReasons))
}

// GetStatusId mocks base method.
func (m *MockIRepositoryInfo) GetStatusId(status string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusId", status)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusId indicates an expected call of GetStatusId.
func (mr *MockIRepositoryInfoMockRecorder) GetStatusId(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusId", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetStatusId), status)
}

// GetStatuses mocks base method.
func (m *MockIRepositoryInfo) GetStatuses() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatuses")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatuses indicates an expected call of GetStatuses.
func (mr *MockIRepositoryInfoMockRecorder) GetStatuses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatuses", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetStatuses))
}

// GetZodiac mocks base method.
func (m *MockIRepositoryInfo) GetZodiac() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZodiac")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZodiac indicates an expected call of GetZodiac.
func (mr *MockIRepositoryInfoMockRecorder) GetZodiac() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZodiac", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetZodiac))
}

// GetZodiacId mocks base method.
func (m *MockIRepositoryInfo) GetZodiacId(nameZodiac string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZodiacId", nameZodiac)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZodiacId indicates an expected call of GetZodiacId.
func (mr *MockIRepositoryInfoMockRecorder) GetZodiacId(nameZodiac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZodiacId", reflect.TypeOf((*MockIRepositoryInfo)(nil).GetZodiacId), nameZodiac)
}
