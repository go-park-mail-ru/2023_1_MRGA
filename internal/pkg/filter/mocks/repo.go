// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dataStruct "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/app/data_struct"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryFilter is a mock of IRepositoryFilter interface.
type MockIRepositoryFilter struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryFilterMockRecorder
}

// MockIRepositoryFilterMockRecorder is the mock recorder for MockIRepositoryFilter.
type MockIRepositoryFilterMockRecorder struct {
	mock *MockIRepositoryFilter
}

// NewMockIRepositoryFilter creates a new mock instance.
func NewMockIRepositoryFilter(ctrl *gomock.Controller) *MockIRepositoryFilter {
	mock := &MockIRepositoryFilter{ctrl: ctrl}
	mock.recorder = &MockIRepositoryFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryFilter) EXPECT() *MockIRepositoryFilterMockRecorder {
	return m.recorder
}

// AddFilter mocks base method.
func (m *MockIRepositoryFilter) AddFilter(filter *dataStruct.UserFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilter", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFilter indicates an expected call of AddFilter.
func (mr *MockIRepositoryFilterMockRecorder) AddFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilter", reflect.TypeOf((*MockIRepositoryFilter)(nil).AddFilter), filter)
}

// AddUserReason mocks base method.
func (m *MockIRepositoryFilter) AddUserReason(reason []dataStruct.UserReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserReason", reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserReason indicates an expected call of AddUserReason.
func (mr *MockIRepositoryFilterMockRecorder) AddUserReason(reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserReason", reflect.TypeOf((*MockIRepositoryFilter)(nil).AddUserReason), reason)
}

// ChangeFilter mocks base method.
func (m *MockIRepositoryFilter) ChangeFilter(newFilter dataStruct.UserFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFilter", newFilter)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeFilter indicates an expected call of ChangeFilter.
func (mr *MockIRepositoryFilterMockRecorder) ChangeFilter(newFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFilter", reflect.TypeOf((*MockIRepositoryFilter)(nil).ChangeFilter), newFilter)
}

// DeleteUserReason mocks base method.
func (m *MockIRepositoryFilter) DeleteUserReason(userId uint, reactionId []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserReason", userId, reactionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserReason indicates an expected call of DeleteUserReason.
func (mr *MockIRepositoryFilterMockRecorder) DeleteUserReason(userId, reactionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserReason", reflect.TypeOf((*MockIRepositoryFilter)(nil).DeleteUserReason), userId, reactionId)
}

// GetFilter mocks base method.
func (m *MockIRepositoryFilter) GetFilter(userId uint) (dataStruct.UserFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilter", userId)
	ret0, _ := ret[0].(dataStruct.UserFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilter indicates an expected call of GetFilter.
func (mr *MockIRepositoryFilterMockRecorder) GetFilter(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilter", reflect.TypeOf((*MockIRepositoryFilter)(nil).GetFilter), userId)
}

// GetReasonById mocks base method.
func (m *MockIRepositoryFilter) GetReasonById(reasonId []uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReasonById", reasonId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReasonById indicates an expected call of GetReasonById.
func (mr *MockIRepositoryFilterMockRecorder) GetReasonById(reasonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReasonById", reflect.TypeOf((*MockIRepositoryFilter)(nil).GetReasonById), reasonId)
}

// GetReasonId mocks base method.
func (m *MockIRepositoryFilter) GetReasonId(reason []string) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReasonId", reason)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReasonId indicates an expected call of GetReasonId.
func (mr *MockIRepositoryFilterMockRecorder) GetReasonId(reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReasonId", reflect.TypeOf((*MockIRepositoryFilter)(nil).GetReasonId), reason)
}

// GetUserReasons mocks base method.
func (m *MockIRepositoryFilter) GetUserReasons(userId uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReasons", userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReasons indicates an expected call of GetUserReasons.
func (mr *MockIRepositoryFilterMockRecorder) GetUserReasons(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReasons", reflect.TypeOf((*MockIRepositoryFilter)(nil).GetUserReasons), userId)
}

// GetUserReasonsId mocks base method.
func (m *MockIRepositoryFilter) GetUserReasonsId(userId uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReasonsId", userId)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReasonsId indicates an expected call of GetUserReasonsId.
func (mr *MockIRepositoryFilterMockRecorder) GetUserReasonsId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReasonsId", reflect.TypeOf((*MockIRepositoryFilter)(nil).GetUserReasonsId), userId)
}
