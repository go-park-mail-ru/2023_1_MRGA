// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	recommendation "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/pkg/recommendation"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CheckProStatus mocks base method.
func (m *MockUseCase) CheckProStatus(userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProStatus", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckProStatus indicates an expected call of CheckProStatus.
func (mr *MockUseCaseMockRecorder) CheckProStatus(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProStatus", reflect.TypeOf((*MockUseCase)(nil).CheckProStatus), userId)
}

// GetLikes mocks base method.
func (m *MockUseCase) GetLikes(userId uint) ([]recommendation.Recommendation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikes", userId)
	ret0, _ := ret[0].([]recommendation.Recommendation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikes indicates an expected call of GetLikes.
func (mr *MockUseCaseMockRecorder) GetLikes(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikes", reflect.TypeOf((*MockUseCase)(nil).GetLikes), userId)
}

// GetLikesCount mocks base method.
func (m *MockUseCase) GetLikesCount(userId uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesCount", userId)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesCount indicates an expected call of GetLikesCount.
func (mr *MockUseCaseMockRecorder) GetLikesCount(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesCount", reflect.TypeOf((*MockUseCase)(nil).GetLikesCount), userId)
}

// GetRecommendations mocks base method.
func (m *MockUseCase) GetRecommendations(userId uint) ([]recommendation.Recommendation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendations", userId)
	ret0, _ := ret[0].([]recommendation.Recommendation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendations indicates an expected call of GetRecommendations.
func (mr *MockUseCaseMockRecorder) GetRecommendations(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendations", reflect.TypeOf((*MockUseCase)(nil).GetRecommendations), userId)
}

// GetStatus mocks base method.
func (m *MockUseCase) GetStatus(userId uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockUseCaseMockRecorder) GetStatus(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockUseCase)(nil).GetStatus), userId)
}
