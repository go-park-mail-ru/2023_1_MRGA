// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dataStruct "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/app/data_struct"
	recommendation "github.com/go-park-mail-ru/2023_1_MRGA.git/internal/pkg/recommendation"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryRec is a mock of IRepositoryRec interface.
type MockIRepositoryRec struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryRecMockRecorder
}

// MockIRepositoryRecMockRecorder is the mock recorder for MockIRepositoryRec.
type MockIRepositoryRecMockRecorder struct {
	mock *MockIRepositoryRec
}

// NewMockIRepositoryRec creates a new mock instance.
func NewMockIRepositoryRec(ctrl *gomock.Controller) *MockIRepositoryRec {
	mock := &MockIRepositoryRec{ctrl: ctrl}
	mock.recorder = &MockIRepositoryRecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryRec) EXPECT() *MockIRepositoryRecMockRecorder {
	return m.recorder
}

// GetRecommendation mocks base method.
func (m *MockIRepositoryRec) GetRecommendation(userId uint, history, reasons, hashtags []uint, filters dataStruct.UserFilter) ([]recommendation.UserRecommend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendation", userId, history, reasons, hashtags, filters)
	ret0, _ := ret[0].([]recommendation.UserRecommend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendation indicates an expected call of GetRecommendation.
func (mr *MockIRepositoryRecMockRecorder) GetRecommendation(userId, history, reasons, hashtags, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendation", reflect.TypeOf((*MockIRepositoryRec)(nil).GetRecommendation), userId, history, reasons, hashtags, filters)
}

// GetRecommendedUser mocks base method.
func (m *MockIRepositoryRec) GetRecommendedUser(userId uint) (recommendation.Recommendation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendedUser", userId)
	ret0, _ := ret[0].(recommendation.Recommendation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendedUser indicates an expected call of GetRecommendedUser.
func (mr *MockIRepositoryRecMockRecorder) GetRecommendedUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendedUser", reflect.TypeOf((*MockIRepositoryRec)(nil).GetRecommendedUser), userId)
}

// GetUserHistory mocks base method.
func (m *MockIRepositoryRec) GetUserHistory(userId uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistory", userId)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHistory indicates an expected call of GetUserHistory.
func (mr *MockIRepositoryRecMockRecorder) GetUserHistory(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistory", reflect.TypeOf((*MockIRepositoryRec)(nil).GetUserHistory), userId)
}
