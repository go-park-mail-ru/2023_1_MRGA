package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"

	"github.com/joho/godotenv"
	_ "github.com/lib/pq"

	"github.com/go-park-mail-ru/2023_1_MRGA.git/internal/app/dsn"
)

func main() {
	_ = godotenv.Load()
	connStr := dsn.FromEnv()
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Println("db connection failed", err.Error())
		os.Exit(2)
	}
	err = db.Ping()
	if err != nil {
		log.Println("db connection failed", err.Error())
		os.Exit(2)
	}

	exist, err := CheckExist(db, "user")
	if err != nil {
		log.Println("db check failed", err.Error())
		os.Exit(2)
	}

	if !exist {
		err = CreateTableUser(db)
		if err != nil {
			log.Println("db check failed", err.Error())
			os.Exit(2)
		}
	}

}

func CheckExist(db *sql.DB, tableName string) (bool, error) {
	query := fmt.Sprintf("SELECT * FROM %s LIMIT 1", tableName)
	row, err := db.Query(query)
	log.Println(row)
	var tmp interface{}
	err = row.Scan(&tmp)
	if err == sql.ErrNoRows {
		return false, nil
	}
	if err == nil {
		return true, nil
	}
	return false, err
}

func CreateTableUser(db *sql.DB) error {
	query := "CREATE TABLE User (\n" +
		"    id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n" +
		"    username  varchar(30) NOT NULL, UNIQUE\n" +
		"    email varchar(30) NOT NULL, UNIQUE\n" +
		"    password varchar(30) NOT NULL,\n" +
		"    age integer NOT NULL\n" +
		"    sex varchar(30) NOT NULL,\n" +
		"    city integer FOREIGN KEY, NOT NULL,\n" +
		"    description varchar(300) NOT NULL,\n" +
		"    avatar varchar(100) NOT NULL);"

	_, err := db.Exec(query)
	return err
}
