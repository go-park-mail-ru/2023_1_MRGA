// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package authProto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto(in *jlexer.Lexer, out *UserToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto(out *jwriter.Writer, in UserToken) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Token != "" {
		const prefix string = ",\"token\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto1(in *jlexer.Lexer, out *UserResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserId = uint32(in.Uint32())
		case "token":
			out.Token = string(in.String())
		case "ok":
			out.Ok = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto1(out *jwriter.Writer, in UserResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserId != 0 {
		const prefix string = ",\"userId\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.UserId))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.Ok {
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Ok))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto1(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto2(in *jlexer.Lexer, out *UserRegisterInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "birthday":
			out.Birthday = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto2(out *jwriter.Writer, in UserRegisterInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Birthday != "" {
		const prefix string = ",\"birthday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Birthday))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserRegisterInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserRegisterInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserRegisterInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserRegisterInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto2(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto3(in *jlexer.Lexer, out *UserLoginInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto3(out *jwriter.Writer, in UserLoginInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLoginInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLoginInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLoginInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLoginInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto3(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto4(in *jlexer.Lexer, out *UserChangeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserId = uint32(in.Uint32())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "birthday":
			out.Birthday = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto4(out *jwriter.Writer, in UserChangeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserId != 0 {
		const prefix string = ",\"userId\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.UserId))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Birthday != "" {
		const prefix string = ",\"birthday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Birthday))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserChangeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserChangeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserChangeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserChangeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto4(l, v)
}
func easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto5(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.Ok = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto5(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ok {
		const prefix string = ",\"ok\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Ok))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8fbe0d0EncodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8fbe0d0DecodeGithubComGoParkMailRu20231MRGAGitServicesProtoAuthProto5(l, v)
}
