version: "3.8" # версия вашего docker-compose
services: # имеджи, которые запустятся по вашему желанию
  db: # название моего имеджа
    image: postgres:12 # скачает image postgres 12 версии
    volumes: # часть настроек для хранения данных, пока для нас это не важно
      - type: volume
        source: postgresdb-data
        target: /var/lib/postgresql/data
    ports: # порты
      - "5432:5432"
    networks:
      - service-network
    environment:
      POSTGRES_PASSWORD: "marga_password"
      POSTGRES_DB: "mrga"
      POSTGRES_USER: "mrga_user"
      PGPORT: 5432
      TZ: "Europe/Moscow"
  db-storage:
    image: postgres:latest
    volumes:
      - type: volume
        source: postgresstore-data
        target: /var/lib/postgresql/data
    ports:
      - "5433:5433"
    networks:
      - service-network
    environment:
      POSTGRES_PASSWORD: "mrga_password"
      POSTGRES_DB: "mrga_storage"
      POSTGRES_USER: "mrga_user"
      PGPORT: 5433
      TZ: "Europe/Moscow"
  db-chat:
    image: postgres:latest
    volumes:
      - type: volume
        source: postgreschat-data
        target: /var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: "mrga_password"
      POSTGRES_DB: "mrga_chat"
      POSTGRES_USER: "mrga_user"
      PGPORT: 5434
      TZ: "Europe/Moscow"

    ports:
      - "5434:5434"
    networks:
      - service-network
  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass password
    volumes:
      - redis-data:/data
    networks:
      - service-network
    environment:
      TZ: "Europe/Moscow"


#  file-storage-service:
#    image: golang:1.20.4-alpine3.16
#    volumes:
#      - "${PWD}:/project"
#    restart: always
#    working_dir: '/project'
#    command: sh -c "go run ./services/files_storage/cmd/main.go"
#    networks:
#      - service-network
#    ports:
#      - "8081:8081"
#  auth-service:
#    image: golang:1.20.4-alpine3.16
#    volumes:
#      - "${PWD}:/project"
#    restart: always
#    working_dir: '/project'
#    command: sh -c "go run ./services/auth/cmd/auth/main.go"
#    networks:
#      - service-network
#    depends_on:
#      - complaints-service
#  complaints-service:
#    image: golang:1.20.4-alpine3.16
#    volumes:
#      - "${PWD}:/project"
#    restart: always
#    working_dir: '/project'
#    command: sh -c "go run ./services/complaints/cmd/app/main.go"
#    networks:
#      - service-network
#  chat-service:
#    image: golang:1.20.4-alpine3.16
#    volumes:
#      - "${PWD}:/project"
#    restart: always
#    working_dir: '/project'
#    command: sh -c "go run ./services/chat/cmd/main.go"
#    networks:
#      - service-network
#    environment:
#      TZ: "Europe/Moscow"
#  web-server:
#    build:
#      context: .
#      dockerfile: config/dockerfiles/nginx.dockerfile
#    volumes:
#      - "${PWD}/config/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
#      - "/etc/letsencrypt/live/meetme-app.ru/privkey.pem:/etc/letsencrypt/live/meetme-app.ru/privkey.pem:ro"
#      - "/etc/letsencrypt/live/meetme-app.ru/fullchain.pem:/etc/letsencrypt/live/meetme-app.ru/fullchain.pem:ro"
#    ports:
#      - "81:81"
#      - "444:444"
#    networks:
#      - service-network
#    depends_on:
#      - server-backend
#    environment:
#      TZ: "Europe/Moscow"
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
  grafana:
    # Change latest with your target version, if needed
    image: grafana/grafana:latest
    ports:
      - "3100:3000"
    volumes:
      # Use your plugin folder (e.g. redshift-datasource)
      - grafana-storage:/var/lib/grafana
    environment:
      - TERM=linux
      - GF_LOG_LEVEL=debug
      - GF_DATAPROXY_LOGGING=true
      - GF_DEFAULT_APP_MODE=development
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: exporter
    hostname: exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9100:9100
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - default

volumes: # часть настроек для хранения данных
  postgresdb-data:
    driver: local
  redis-data:
    driver: local
  postgresstore-data:
    driver: local
  postgreschat-data:
    driver: local
  grafana-storage:
  prometheus_data:

networks:
  service-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 11.0.0.0/24
          gateway: 11.0.0.1
